LinkedList :
	It is representation of nodes in such a way that every node is linked with the next node , so that in order to reach a perticular node , we need to start from the first one and then access the next one and so on. 

Node based storage :-
	Every node has 2 parts in it. 
		1) data part :- contains the value to be stored in the node
		2) next part :- contains reference to the next node

Traversal : 

To be done: 
show values of all nodes starting from the first node.

How to do it: 

1) check if head node is null , if yes then list is empty.

2) check if head node's next is null , if yes then that is the only node present in the list.

3) else create a node reference say temp and assign head node to it.

4) start displaying node data. keep on assigning temp to next of temp till temp becomes equal to null.





Insertion (At last position) :

To be done: 
Given a ‘value’, Store this value in the linked list after the last node.

How to do it: 

1) create a new node , store the value in it and set the next part of node to null.

2) check if the list is empty (i.e. head node is null), if yes then set the newly created node as the first node (i.e. head node).

3) set the head of node to a temp node. keep on moving the temp node to next node and stop when the temp node's next is null.

4) once the end is reached , assign newly added node as the next of the temp node's next. 



Insertion (After the node having the given value) :

To be done: 
insert new node in the linked list after the node having the given value.

How to do it: 

1) create a new node , store the value in it and set the next part of node to null.

2) check if the list is empty (i.e. head node is null), if yes then can not insert the new node.

3) set the head node to a temp node. keep on moving the temp node to next node and stop when the temp node is null AND temp node's value matches with the given value.

4) if temp is not equal to null (i.e. temp node's value matches with the given value) then set new node's next to temp node's next. and temp node's next to new node.

5) if temp is equal to null , it means no node with given value found.




Deletion By VALUE:

To be done: 

Given a ‘value’, delete the first occurrence of this value in the linked list.

How to do it: 

To delete a node from the linked list, do following steps.  

Search the value for its first occurrence in the list
Now, Any of the 3 conditions can be there: 

Case 1: The value is found at the head 

In this case, Change the head of the node to the next node of the current head. 
Free the memory of the replaced head node.


Case 2: The value is found in the middle or last, except at the head 

In this case, Find the previous node of the node to be deleted. 
Change the next of the previous node to the next node of the current node.
Free the memory of the replaced node.


Case 3: The value is not found in the list 

In this case, No operation needs to be done. 





Deletion At Position:

To be done: 
Given a ‘position’, delete the node at this position from the linked list.
How to do it: 

The steps to do it are as follows: 

Traverse the list by counting the index of the nodes
For each index, match the index to be same as position
Now, Any of the 3 conditions can be there: 

Case 1: The position is 0, i.e. the head is to be deleted 

In this case, Change the head of the node to the next node of current head. 
Free the memory of replaced head node.


Case 2: The position is greater than 0 but less than the size of the list, i.e. in the middle or last, except at head 

In this case, Find previous node of the node to be deleted. 
Change the next of previous node to the next node of current node.
Free the memory of replaced node.


Case 3: The position is greater than the size of the list, i.e. position not found in the list 

In this case, No operation needs to be done. 
