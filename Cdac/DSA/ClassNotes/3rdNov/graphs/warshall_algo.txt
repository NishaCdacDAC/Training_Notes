Floyd-Warshall Algorithm :-
1) It uses dynamic programming where problem is solved by taking sequence of decisions.

2) In each step , a decision will be taken.

3) e.g. if shortest path from vertex 1 to 2 is to be calculated then there can be direct edge between the vertices or may be there is a shorter path going via vertex 3 also or via vertex 4.

4) i.e. we will have to check / decide if shorter path is going via some other vertex.

5) we will have to find out if there is shorter path between all the pair of vertices going via vertex 1 , then via vertex 2 and so on.  

6) It is done using adjacency matrix.

7) If we start from vertex 1 then all the paths that belong to vertex 1 will remain unchanged.



Warshall Algorithm :- Tracing

	A^k[i,j] = min {A^k-1[i,j] , A^k-1[i,k] + A^k-1[k,j]}

	A1[i,j] = min {A0[i,j] , A0[i,k] + A0[k,j]}


	A1[2,3] = min {2 , A0[2,1] + A0[1,3]} 
	
	A1[2,3] = min {2 , 8 + 00}

	A1[2,3] = min {2,00}

	A1[2,3] = 2



	A1[2,4] = min {00 , A0[2,1] + A0[1,4]} 
	
	A1[2,4] = min {00 , 8 + 7}

	A1[2,4] = min {00,15}

	A1[2,4] = 15



	A1[i,j] = min {A0[i,j] , A0[i,k] + A0[k,j]}

	A1[3,2] = min {A0[3,2] , A0[3,1] + A0[1,2]} 
	
	A1[3,2] = min {00 , 5 + 3}

	A1[3,2] = min {00,8}

	A1[3,2] = 8



	A1[i,j] = min {A0[i,j] , A0[i,k] + A0[k,j]}

	A1[3,4] = min {A0[3,4] , A0[3,1] + A0[1,4]} 
	
	A1[3,4] = min {1 , 5 + 7}

	A1[3,4] = min {1,12}

	A1[3,4] = 1



	A1[i,j] = min {A0[i,j] , A0[i,k] + A0[k,j]}

	A1[4,2] = min {A0[4,2] , A0[4,1] + A0[1,2]} 
	
	A1[4,2] = min {00 , 2 + 3}

	A1[4,2] = min {00,5}

	A1[4,2] = 5



	A1[i,j] = min {A0[i,j] , A0[i,k] + A0[k,j]}

	A1[4,3] = min {A0[4,3] , A0[4,1] + A0[1,3]} 
	
	A1[4,3] = min {00 , 2 + 00}

	A1[4,3] = min {00,00}

	A1[4,3] = 00


	A^k[i,j] = min {A^k-1[i,j] , A^k-1[i,k] + A^k-1[k,j]}

	A2[i,j] = min {A1[i,j] , A1[i,k] + A1[k,j]}
	
	
	A2[1,3] = min {A1[1,3] , A1[1,2] + A1[2,3]}

		= min {00 , 3 + 2}

	A2[1,3]	= 5



	A2[i,j] = min {A1[i,j] , A1[i,k] + A1[k,j]}
	
	A2[1,4] = min {A1[1,4] , A1[1,2] + A1[2,4]}

		= min {7 , 3 + 15}

	A2[1,4]	= 7



	A2[i,j] = min {A1[i,j] , A1[i,k] + A1[k,j]}
	
	A2[3,1] = min {A1[3,1] , A1[3,2] + A1[2,1]}

		= min { 5 , 8 + 8}

	A2[3,1]	= 5


	A2[i,j] = min {A1[i,j] , A1[i,k] + A1[k,j]}
	
	A2[3,4] = min {A1[3,4] , A1[3,2] + A1[2,4]}

		= min { 1 , 8 + 15}

	A2[3,4]	= 1



	A2[i,j] = min {A1[i,j] , A1[i,k] + A1[k,j]}
	
	A2[4,1] = min {A1[4,1] , A1[4,2] + A1[2,1]}

		= min {2, 5 + 8}

	A2[4,1]	= 2



	A2[i,j] = min {A1[i,j] , A1[i,k] + A1[k,j]}
	
	A2[4,3] = min {A1[4,3] , A1[4,2] + A1[2,3]}

		= min {00, 5 + 2}

	A2[4,3]	= 7




	A^k[i,j] = min {A^k-1[i,j] , A^k-1[i,k] + A^k-1[k,j]}

	A3[i,j] = min {A2[i,j] , A2[i,k] + A2[k,j]}
	
	A3[1,2] = min {A2[1,2] , A2[1,3] + A2[3,2]}
		= min {3 , 5+8}
		= 3

	A3[1,4] = min {A2[1,4] , A2[1,3] + A2[3,4]}
		= min {7 , 5+1}
		= 6


	A3[2,1] = min {A2[2,1] , A2[2,3] + A2[3,1]}
		= min {8, 2 + 5}
		= 7

	A3[2,4] = min {A2[2,4] , A2[2,3] + A2[3,4]}
		= min {15, 2 + 1}
		= 3

	A3[4,1] = min {A2[4,1] , A2[4,3] + A2[3,1]}
		= min {2 , 7 + 5}
		= 2

	A3[4,2] = min {A2[4,2] , A2[4,3] + A2[3,2]}
		= min {5 , 7 + 8}
		= 5

		
	
	A^k[i,j] = min {A^k-1[i,j] , A^k-1[i,k] + A^k-1[k,j]}

	A4[i,j] = min {A3[i,j] , A3[i,k] + A3[k,j]}

	A4[1,2] = min {A3[1,2] , A3[1,4] + A3[4,2]}
		= min {3 , 6 + 5}
		= 3

	A4[1,3] = min {A3[1,3] , A3[1,4] + A3[4,3]}
		= min {5 , 6 + 7}
		= 3
	
	A4[2,1] = min {A3[2,1] , A3[2,4] + A3[4,1]}
		= min {7 , 3 + 2}
		= 5

	A4[2,3] = min {A3[2,3] , A3[2,4] + A3[4,3]}
		= min {3 , 3 + 7}
		= 3

	A4[3,1] = min {A3[3,1] , A3[3,4] + A3[4,1]}
		= min {5 , 1 + 2}
		= 3

	A4[3,2] = min {A3[3,2] , A3[3,4] + A3[4,2]}
		= min {8 , 1 + 5}
		= 6










